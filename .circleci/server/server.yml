Description: >
    Udacity - Deploy a high-availability web app using CloudFormation

# <-------------INPUT PARAMETERS------------->
Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resources
        Type: String
        Default: dev

    InstanceType:
        Description: "The EC2 instance type of general purpose"
        Type: String
        AllowedValues: [t2.medium, t3.small]
        Default: t3.small

# <-------------RESOURCES------------->
Resources:
    # <-------------Security groups------------->
    LoadBalancerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http traffic to and from load balancer
            VpcId:
                Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http and ssh to our load balancer
            VpcId:
                Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0

    # <-------------Launch Configuration------------->
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    sudo apt-get update -y
                    sudo apt-get install docker.io -y
                    # Pull the Docker image from Docker Hub
                    docker pull uchitavietnam/udacity-devops-capstone:latest
                    # Install Kubernetes tools
                    sudo apt-get update -y
                    sudo apt-get install -y apt-transport-https curl
                    curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
                    echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
                    sudo apt-get update -y
                    sudo apt-get install -y kubectl kubeadm kubelet
                    # Run Kubernetes commands to deploy your app
                    kubectl run udacity-devops-capstone --image=uchitavietnam/udacity-devops-capstone:latest --port=80
            ImageId: ami-053b0d53c279acc90
            KeyName: vufpt_keypair
            # IamInstanceProfile: !Ref ProfileWithRolesForOurApp
            SecurityGroups:
                - Ref: WebServerSecGroup
            InstanceType: !Ref "InstanceType"
            BlockDeviceMappings:
                - DeviceName: "/dev/sdk"
                  Ebs:
                      VolumeSize: "10" #10GB

    # <-------------Elastic Load Balancing------------->
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
                Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PRI1-SN"
                - Fn::ImportValue: !Sub "${EnvironmentName}-PRI2-SN"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: "4"
            MaxSize: "6"
            TargetGroupARNs:
                - Ref: WebAppTargetGroup

    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            SecurityGroups:
                - Ref: LoadBalancerSecGroup
            Subnets:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn:
                      Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: WebAppLB
            Port: 80
            Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                - Type: forward
                  TargetGroupArn: !Ref "WebAppTargetGroup"
            Conditions:
                - Field: path-pattern
                  Values: [/]
            ListenerArn: !Ref "Listener"
            Priority: 1

# <-------------CFN OUTPUTS------------->
Outputs:
    WebAppLoadBalancerDNSName:
        Description: DNS name or Public URL of the Load Balancer
        Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName]]
        Export:
            Name: !Sub ${EnvironmentName}-LB-DNSName
