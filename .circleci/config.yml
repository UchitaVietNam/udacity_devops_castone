version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.1
  kubernetes: circleci/kubernetes@1.0.2
  aws-eks: circleci/aws-eks@1.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.Workflow_ID >> "
            aws cloudformation delete-stack --stack-name devops-capstone-network-<< parameters.Workflow_ID >>
            aws cloudformation delete-stack --stack-name devops-capstone-server-<< parameters.Workflow_ID >>

jobs:
  build-docker:
    docker:
      - image: circleci/python:3.9
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            sudo chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            . venv/bin/activate 
            make lint
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build -t uchitavietnam/udacity-devops-capstone:latest .
      - run:
          name: Log in to Docker Hub
          command: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      - run:
          name: Push Docker image
          command: docker push uchitavietnam/udacity-devops-capstone:latest

  deploy-to-eks:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: Install awscli and gettext-base
          command: |
            sudo pip3 install awscli
            sudo apt-get install gettext-base
      - run:
          name: Install aws-iam-authenticator
          command: |
            curl -o aws-iam-authenticator curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            sudo mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
      - run:
          name: Install kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Connect to cluster
          command: |
            aws eks --region us-east-1 update-kubeconfig --name devops-capstone
      - run:
          name: Prepare K8S template
          command: |
            rm -rf .k8s/.generated && mkdir -p .circleci/.k8s/.generated
            for f in .circleci/.k8s/deployment.yaml
              do
              envsubst < $f > ".circleci/.k8s/.generated/$(basename $f)"
            done
      - run:
          name: Deploy
          command: |
            kubectl apply -f .circleci/deployment.yml
            kubectl get pod

  deploy-network:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and zip utilities
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure network infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/network/network.yml \
              --tags project=devops-capstone-network \
              --stack-name "devops-capstone-network-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment

  deploy-server:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and zip utilities
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure server infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/server/server.yml \
              --tags project=devops-capstone-server \
              --stack-name "devops-capstone-server-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment

workflows:
  default:
    jobs:
      - build-docker
      - deploy-to-eks:
          requires: [build-docker]
      # - deploy-network:
      #     requires: [build-docker]
      # - deploy-server:
      #     requires: [deploy-network]
